#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'


require "strscan"

module Calc
  class Machine
    attr_reader :result
    attr_accessor :memory

    def initialize
      @result = 0
      @memory = 0
    end

    def evalulate(statements)
      statements.map(&method(:evalulate_statement))
      @result
    end

    def evalulate_statement(statement)
      result = statement.evalulate(self)

      if result.respond_to?(:value)
        @result = result.value
      else
        nil
      end
    end
  end

  class Statement
    def evalulate(vm)
      self
    end
  end

  class MemRecall < Statement
    def evalulate(vm)
      Number.new(vm.memory)
    end
  end

  class MemClear < Statement
    def evalulate(vm)
      vm.memory = 0
      nil
    end
  end

  class MemPlus < Statement
    def evalulate(vm)
      vm.memory += vm.result
      nil
    end
  end

  class MemMinus < Statement
    def evalulate(vm)
      vm.memory -= vm.result
      nil
    end
  end

  class LastResult < Statement
    def evalulate(vm)
      Number.new(vm.result)
    end
  end

  class Addition < Statement
    def initialize(left, right)
      @left = left
      @right = right
    end

    def evalulate(vm)
      left = @left.evalulate(vm)
      right = @right.evalulate(vm)

      if Percentage === right
        Number.new(left.value * (1 + right.value))
      else
        Number.new(left.value + right.value)
      end
    end
  end

  class Subtraction < Statement
    def initialize(left, right)
      @left = left
      @right = right
    end

    def evalulate(vm)
      left = @left.evalulate(vm)
      right = @right.evalulate(vm)

      if Percentage === right
        Number.new(left.value * (1 - right.value))
      else
        Number.new(left.value - right.value)
      end
    end
  end

  class Multiplication < Statement
    def initialize(left, right)
      @left = left
      @right = right
    end

    def evalulate(vm)
      left = @left.evalulate(vm)
      right = @right.evalulate(vm)

      if Percentage === left || Percentage === right
        Percentage.new(100 * (left.value * right.value))
      else
        Number.new(left.value * right.value)
      end
    end
  end

  class Division < Statement
    def initialize(left, right)
      @left = left
      @right = right
    end

    def evalulate(vm)
      left = @left.evalulate(vm)
      right = @right.evalulate(vm)

      if right.value == 0
        raise RuntimeError, "Division by zero"
      end

      if Percentage === left || Percentage === right
        Percentage.new(100 * (left.value / right.value))
      else
        Number.new(left.value.to_f / right.value)
      end
    end
  end

  class Value < Statement
    attr_reader :value

    def initialize(value)
      @value = value
    end
  end

  class Percentage < Value
    def initialize(value)
      super(value / 100.0)
    end
  end

  class Number < Value
  end
end

module Calc
  class Parser < Racc::Parser

module_eval(<<'...end calc.y/module_eval...', 'calc.y', 205)

  def parse(str)
    tokenize(str)
    do_parse
  end

  private def tokenize(str)
    # Strip comments
    str.gsub!(/#.*$/, "")

    # Strip blank lines
    str.gsub!(/\n+/, "\n")

    # Strip leading and trailing new lines
    str.strip!

    scanner = StringScanner.new(str)

    @tokens = []

    until scanner.eos?
      if scanner.scan(/MR/)
        @tokens << [:MEM_RECALL, nil]
      elsif scanner.scan(/MC/)
        @tokens << [:MEM_CLEAR, nil]
      elsif scanner.scan(/M\+/)
        @tokens << [:MEM_PLUS, nil]
      elsif scanner.scan(/M-/)
        @tokens << [:MEM_MINUS, nil]
      elsif scanner.scan(/[0-9]+(?!\.)/)
        @tokens << [:NUMBER, scanner.matched.to_i]
      elsif scanner.scan(/[0-9]*\.[0-9]+/)
        @tokens << [:NUMBER, scanner.matched.to_f]
      elsif scanner.scan(/\n/)
        @tokens << ["\n", "\n"]
      elsif scanner.scan(/#[^\n]+(?=\n)/)
        next
      elsif scanner.skip(/\s+/)
        next
      else
        s = scanner.scan(/./)
        @tokens << [s, s]
      end
    end

    @tokens.push [false, "$end"]
  end

  private def next_token
    @tokens.shift
  end

...end calc.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    16,    14,    15,    12,    13,     6,     7,     8,     9,    17,
    16,    14,    15,    12,    13,     6,     7,     8,     9,    17,
    22,    23,    20,    21,    22,    23,    20,    21,    22,    23,
    20,    21,    22,    23,    20,    21,    22,    23,    20,    21,
    22,    23,    22,    23,    17,    18,    29,    17,    17,    17,
    28,    17,    17,    17,    17,    19 ]

racc_action_check = [
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    19,    19,    19,    19,    19,    19,    19,    19,    19,    19,
    24,    24,    24,    24,    11,    11,    11,    11,    25,    25,
    25,    25,    26,    26,    26,    26,    27,    27,    27,    27,
    31,    31,    32,    32,    20,     1,    18,    21,    22,    23,
    17,    15,    14,    13,    12,     2 ]

racc_action_pointer = [
    -2,    45,    43,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    21,    43,    42,    41,    40,   nil,    48,    46,     8,
    33,    36,    37,    38,    17,    25,    29,    33,   nil,   nil,
   nil,    37,    39,   nil,   nil ]

racc_action_default = [
    -2,   -24,    -1,    -3,    -5,    -6,    -7,    -8,    -9,   -10,
   -11,   -12,   -24,   -24,   -24,   -24,   -17,   -23,   -24,   -24,
   -24,   -24,   -24,   -24,   -13,   -14,   -15,   -16,   -22,    35,
    -4,   -18,   -19,   -20,   -21 ]

racc_goto_table = [
     3,    24,    25,    26,    27,     2,     1,   nil,   nil,    31,
    32,    33,    34,   nil,   nil,   nil,   nil,   nil,   nil,    30 ]

racc_goto_check = [
     3,     7,     7,     7,     7,     2,     1,   nil,   nil,     7,
     7,     7,     7,   nil,   nil,   nil,   nil,   nil,   nil,     3 ]

racc_goto_pointer = [
   nil,     6,     5,     0,   nil,   nil,   nil,   -11 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     4,     5,    10,    11 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 14, :_reduce_none,
  0, 14, :_reduce_2,
  1, 15, :_reduce_3,
  3, 15, :_reduce_4,
  1, 16, :_reduce_none,
  1, 16, :_reduce_none,
  1, 17, :_reduce_7,
  1, 17, :_reduce_8,
  1, 17, :_reduce_9,
  1, 17, :_reduce_10,
  1, 18, :_reduce_none,
  1, 18, :_reduce_none,
  2, 19, :_reduce_13,
  2, 19, :_reduce_14,
  2, 19, :_reduce_15,
  2, 19, :_reduce_16,
  1, 19, :_reduce_17,
  3, 20, :_reduce_18,
  3, 20, :_reduce_19,
  3, 20, :_reduce_20,
  3, 20, :_reduce_21,
  2, 20, :_reduce_22,
  1, 20, :_reduce_23 ]

racc_reduce_n = 24

racc_shift_n = 35

racc_token_table = {
  false => 0,
  :error => 1,
  "%" => 2,
  "*" => 3,
  "/" => 4,
  "+" => 5,
  "-" => 6,
  :MEM_RECALL => 7,
  :MEM_CLEAR => 8,
  :MEM_PLUS => 9,
  :MEM_MINUS => 10,
  :NUMBER => 11,
  "\n" => 12 }

racc_nt_base = 13

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"%\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "MEM_RECALL",
  "MEM_CLEAR",
  "MEM_PLUS",
  "MEM_MINUS",
  "NUMBER",
  "\"\\n\"",
  "$start",
  "program",
  "statements",
  "statement",
  "command",
  "expression",
  "continuation_expression",
  "simple_expression" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'calc.y', 13)
  def _reduce_2(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 15)
  def _reduce_3(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 16)
  def _reduce_4(val, _values, result)
     result = val[0] + [val[2]] 
    result
  end
.,.,

# reduce 5 omitted

# reduce 6 omitted

module_eval(<<'.,.,', 'calc.y', 20)
  def _reduce_7(val, _values, result)
     result = Calc::MemRecall.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 21)
  def _reduce_8(val, _values, result)
     result = Calc::MemClear.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 22)
  def _reduce_9(val, _values, result)
     result = Calc::MemPlus.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 23)
  def _reduce_10(val, _values, result)
     result = Calc::MemMinus.new 
    result
  end
.,.,

# reduce 11 omitted

# reduce 12 omitted

module_eval(<<'.,.,', 'calc.y', 27)
  def _reduce_13(val, _values, result)
     result = Calc::Addition.new(Calc::LastResult.new, val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 28)
  def _reduce_14(val, _values, result)
     result = Calc::Subtraction.new(Calc::LastResult.new, val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 29)
  def _reduce_15(val, _values, result)
     result = Calc::Multiplication.new(Calc::LastResult.new, val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 30)
  def _reduce_16(val, _values, result)
     result = Calc::Division.new(Calc::LastResult.new, val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 31)
  def _reduce_17(val, _values, result)
     result = Calc::Division.new(Calc::LastResult.new, Calc::Number.new(100)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 33)
  def _reduce_18(val, _values, result)
     result = Calc::Addition.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 34)
  def _reduce_19(val, _values, result)
     result = Calc::Subtraction.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 35)
  def _reduce_20(val, _values, result)
     result = Calc::Multiplication.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 36)
  def _reduce_21(val, _values, result)
     result = Calc::Division.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 37)
  def _reduce_22(val, _values, result)
     result = Calc::Percentage.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 38)
  def _reduce_23(val, _values, result)
     result = Calc::Number.new(val[0]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Calc


parser = Calc::Parser.new
machine = Calc::Machine.new

print ">> "

while input = gets
  begin
    if result = machine.evalulate_statement(parser.parse(input).first)
      puts "=> #{result}"
    end
  rescue
    puts "ERROR"
    raise
  end

  print ">> "
end
